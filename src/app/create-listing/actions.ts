'use server';

import { z } from 'zod';
import { auth, db, storage } from '@/lib/firebase-admin'; // Switch to admin SDK for server actions
import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { ref, uploadString, getDownloadURL } from 'firebase/storage';
import { smartListingCreation } from '@/ai/flows/smart-listing-creation';

const formSchema = z.object({
  title: z.string().min(3, 'Title must be at least 3 characters.'),
  category: z.string().nonempty('Please select a category.'),
  condition: z.enum(['New', 'Used - Like New', 'Used - Good', 'Used - Fair']),
  price: z.coerce.number().min(0, 'Price must be a positive number.'),
  location: z.string().nonempty('Please select a city.'),
  description: z.string().min(10, 'Description must be at least 10 characters.'),
  tags: z.string().optional(),
  image: z.any().refine((val) => val, { message: 'Product image is required.' }),
});

export async function createListingAction(formData: FormData) {
  const rawFormData = Object.fromEntries(formData.entries());

  // 1. Validate user authentication
  const bearer = rawFormData.authToken as string;
  if (!bearer) {
    return { success: false, error: 'User is not authenticated.' };
  }
  const token = bearer.replace('Bearer ', '');
  let decodedToken;
  try {
    decodedToken = await auth.verifyIdToken(token);
  } catch (error) {
    console.error('Error verifying auth token:', error);
    return { success: false, error: 'Authentication token is invalid.' };
  }
  const user = {
    uid: decodedToken.uid,
    displayName: decodedToken.name || 'Anonymous',
    photoURL: decodedToken.picture || '',
  };


  // 2. Validate form data
  const validatedFields = formSchema.safeParse({
    ...rawFormData,
    price: Number(rawFormData.price),
  });

  if (!validatedFields.success) {
    return {
      success: false,
      error: 'Invalid form data.',
      errors: validatedFields.error.flatten().fieldErrors,
    };
  }
  const { image, ...productData } = validatedFields.data;

  try {
    // 3. Upload image to Firebase Storage
    const storageRef = ref(
      storage,
      `products/${Date.now()}-${Math.random().toString(36).substring(7)}`
    );
    const uploadResult = await uploadString(storageRef, image, 'data_url');
    const imageUrl = await getDownloadURL(uploadResult.ref);

    // 4. Add product data to Firestore
    const docRef = await addDoc(collection(db, 'products'), {
      ...productData,
      tags: productData.tags?.split(',').map((tag) => tag.trim()).filter((tag) => tag),
      currency: 'IQD',
      imageUrl,
      imageHint: '', // This could be generated by another AI call if desired
      seller: {
        name: user.displayName,
        avatarUrl: user.photoURL,
        rating: 0,
      },
      sellerId: user.uid,
      createdAt: serverTimestamp(),
    });

    return { success: true, productId: docRef.id };
  } catch (error) {
    console.error('Error creating listing:', error);
    return { success: false, error: 'Could not create listing. Please try again.' };
  }
}


export async function generateAIAssistance(photoDataUri: string, title?: string, category?: string) {
    if (!photoDataUri) {
        return { success: false, error: "Please upload an image first to use the AI assistant." };
    }
    
    try {
        const result = await smartListingCreation({
            photoDataUri,
            title,
            category,
        });
        return { success: true, data: result };
    } catch (error) {
        console.error("AI generation failed:", error);
        return { success: false, error: "Could not generate suggestions. Please try again." };
    }
}